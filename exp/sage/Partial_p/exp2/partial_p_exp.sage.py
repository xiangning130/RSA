

# This file was *autogenerated* from the file partial_p_exp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0xd7e990dec6585656512c841ac932edaf048184bac5ebf9967000000000000000 = Integer(0xd7e990dec6585656512c841ac932edaf048184bac5ebf9967000000000000000); _sage_const_0xb50193dc86a450971312d72cc8794a1d3f4977bcd1584a20c31350ac70365644074c0fb50b090f38d39beb366babd784d6555d6de3be54dad3e87a93a703abdd = Integer(0xb50193dc86a450971312d72cc8794a1d3f4977bcd1584a20c31350ac70365644074c0fb50b090f38d39beb366babd784d6555d6de3be54dad3e87a93a703abdd); _sage_const_60 = Integer(60); _sage_const_2 = Integer(2); _sage_const_0p4 = RealNumber('0.4'); _sage_const_0 = Integer(0)
p = _sage_const_0xd7e990dec6585656512c841ac932edaf048184bac5ebf9967000000000000000 
n = _sage_const_0xb50193dc86a450971312d72cc8794a1d3f4977bcd1584a20c31350ac70365644074c0fb50b090f38d39beb366babd784d6555d6de3be54dad3e87a93a703abdd 

kbits = _sage_const_60 
PR = PolynomialRing(Zmod(n), names=('x',)); (x,) = PR._first_ngens(1)
f = x + p
x0 = f.small_roots(X=_sage_const_2 **kbits, beta=_sage_const_0p4 )[_sage_const_0 ]
print("x: %s" %hex(int(x0)))
p = p+x0
print("p: ", hex(int(p)))
assert n % p == _sage_const_0 
q = n/int(p)
print("q: ", hex(int(q)))

