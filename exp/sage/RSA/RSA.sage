from gmpy2 import *

def partial_p(p0, kbits, n):
    PR.<x> = PolynomialRing(Zmod(n))
    nbits = n.nbits()

    f = x + p0
    roots = f.small_roots(X=2^(nbits//2-kbits), beta=0.3)
    if roots:
        x0 = roots[0]
        p = gcd(x0 + p0, n)
        return ZZ(p)

n = 16062903805684557061190205834834465151017822716555151220023923010391751712319057157465716840440141528414319141683371782838088019504185080486732510615589195922206582988076275468909421352237518151072731606120642507756465690253543224106174236846000374950247944543609323989136046679339468463055388251710329230440834634815178151399535720886664590693193039295156561013536876465227776022360355238309340786395625895087249524173379017788108295588414986588832865516132410965769539337787418548043821594072371461842078722189662960522682674585507677235329727206009612576797264782573032022842126688015414011530213366015208919566667
c = 6640525153061184830528271570670375933215054787230631401058444214709114693899155102333563729021159723035647263888485228122546237400259834780287807183504035788059325524971019343192056510820976585247319711161312885075478571667341843100514677888335679004016278376262403726446748300035118044770139161906147452929617916256819098420016631616883617173902952042158990921800151145136106154758446087740641594854972819134593763454404890290363858784313620295676388097284731846718294298852713797401217759747165553756355285344309688433081200595674165218110403341010669300837375965136884226745430041310123290724186727552765977125643
p0 = 147369164353330033633781992585026007996982297348900633048715414755909273427868040785425328588779745978455504270562140851261927143283552087632560268234839262654946948873798239351039683403957655230447804988496326026366443509545229784921481752569471984019108343138326192862851526203658891142344611859242099408896

p = partial_p(p0, 1024-256, n)
q = n//p
assert p*q==n
m = pow(c, invert(65537, (p-1)*(q-1)), n)
print(long_to_bytes(m))
