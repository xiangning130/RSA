from Crypto.Util.number import *


def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)


n = 104669555652181975945748537777327825056967998185818329795738369089877594730194071427074819659172179912579119279606883827675088950756568885718418718289376610690915380026154753098005186311376020565503119931090628360846561290691322742144668317782615516721929123386840268724521901249038735726428794682890544526973
c1 = 29125734981782032584086745313002879378688801953910165576177072696849279479173354311239956405308789138221044869924214844012018525590070440090312826693756096488312741080583452001751888403285052547555787071050755011136564600314351089913047994718844334433511966914194264910232755783946941927793873374314362609190
c2 = 65361558631862236742418628322028017993839911775986911411626446831890632789752206583196916658307229044307442189304314361452197139370225449783715562645914614899981014923572130595662233241865396608942459051575338790356614215563456465457503393821597544029857836998842155312717704726160708563790293454616889480904
e1 = 4053646229
e2 = 2219955739

s = egcd(e1, e2)
s1, s2 = s[1], s[2]
if s1 < 0:
    s1 = - s1
    c1 = inverse(c1, n)
elif s2 < 0:
    s2 = - s2
    c2 = inverse(c2, n)

m = pow(c1, s1, n)*pow(c2, s2, n) % n
flag = long_to_bytes(m)
print(flag)
