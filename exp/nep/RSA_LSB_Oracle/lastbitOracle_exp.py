from pwn import *
from Crypto.Util.number import *

HOST = "111.200.241.244"
POST = 59279
r = remote(HOST, POST)

def proof_of_work():
    rev = r.recvuntil("sha256(XXXX+")
    suffix = r.recv(16).decode()
    rev = r.recvuntil(" == ")
    tar = r.recv(64).decode()

    def f(x):
        hashresult = hashlib.sha256(x.encode()+suffix.encode()).hexdigest()
        return hashresult == tar

    prefix = util.iters.mbruteforce(f, string.digits + string.ascii_letters, 4, 'upto')
    r.recvuntil("Give me XXXX:")
    r.sendline(prefix)

def getNum(c):
    r.sendline(b"1")
    r.recvuntil(b"Your cipher (in hex): ")
    r.sendline(hex(c)[2:].encode())
    return int(r.recvline().decode().strip())

proof_of_work()
r.recvuntil(b"n = ")
n = int(r.recvline().decode().strip())
r.recvuntil(b"c = ")
c = int(r.recvline().decode().strip())
e = 65537
#c=10000168328337586723723875929199426704755546201195615734523254693814039765906148543232611129765509088000736956851520022537085658495744583517648184152998168309758485546037306528320166722634787751788563573939958617061265638476529095277032847794703409537505203594204567151328850116513909550356213958708966751554276850944050261394701167302379584172517413175668997227366580985191901168830374739189734903482208079680206788635600160218616793118994764212910484101984483101655772133593536065667175866557356425850372486695596296455668658676150338420608042931515767744544733279970819343643596659567320755262783035393928843439072
#n=23151835947001890563332084690882686722416825610870124459084634108019653438412148490686793061182123518897053587915339927584001268218928123181995033254073721516784238155708123644279115367335558802119039931066918586718308612163564922269901211780000628113424362913059672868298129539701622212554142493295591837132792331893368263203631540040036650657406925415080555641035176908975115843371841608137305989571425521681291134268979778717542691918719204580421414544125575183908019957005387100204416514446194004248903329685149466462840820774045681150946798573770429284291788358992529532582282116966963982130099612424257502910171




upper = n
lower = 0
i = 1
while True:
    power = pow(2, i, n)
    new_c = (pow(power, e, n)*c) % n
    rev = getNum(new_c)
    if rev == 0:
        upper = (lower+upper)//2
    else:
        lower= (lower+upper)//2
    print("bitlength(upper) =",upper.bit_length())
    if (upper-lower) < 2:
        break
    i += 1
for i in range(100):
    if pow(lower+i, e, n) == c:
        print(long_to_bytes(lower+i))
        break

r.interactive()
